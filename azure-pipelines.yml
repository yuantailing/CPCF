# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

jobs:
- job: Windows
  condition: in(variables['Build.Reason'], 'Manual', 'Schedule')
  timeoutInMinutes: 10

  strategy:
    matrix:
      VS2017 x86 Debug:
        VMIMAGE: vs2017-win2016
        PLATFORM: x86
        CONFIGURATION: Debug
      VS2017 x86 Release:
        VMIMAGE: vs2017-win2016
        PLATFORM: x86
        CONFIGURATION: Release
      VS2017 x64 Debug:
        VMIMAGE: vs2017-win2016
        PLATFORM: x64
        CONFIGURATION: Debug
      VS2017 x64 Release:
        VMIMAGE: vs2017-win2016
        PLATFORM: x64
        CONFIGURATION: Release
      VS2019 x86 Debug:
        VMIMAGE: windows-2019
        PLATFORM: x86
        CONFIGURATION: Debug
      VS2019 x86 Release:
        VMIMAGE: windows-2019
        PLATFORM: x86
        CONFIGURATION: Release
      VS2019 x64 Debug:
        VMIMAGE: windows-2019
        PLATFORM: x64
        CONFIGURATION: Debug
      VS2019 x64 Release:
        VMIMAGE: windows-2019
        PLATFORM: x64
        CONFIGURATION: Release

  pool:
    vmImage: $(VMIMAGE)

  steps:
  - bash: |
      set -ex
      curl https://github.com/jiapw/CPCF/releases/download/CPCF-Libs/cpcf_win_ipp.7z -Locpcf_win_ipp.7z
      curl https://github.com/jiapw/CPCF/releases/download/CPCF-Libs/cpcf_win_mkl.7z -Locpcf_win_mkl.7z
      7z x cpcf_win_ipp.7z -olibs/win/
      7z x cpcf_win_mkl.7z -olibs/win/
    displayName: Retrieve libs

  - task: VSBuild@1
    inputs:
      solution: 'testcases\proj.win\tests.sln'
      platform: '$(PLATFORM)'
      configuration: '$(CONFIGURATION)'
      maximumCpuCount: true

  - powershell: |
      Move-Item ..\testcases.log ..\testcases.std
      if ($env:PLATFORM -eq "x86") {
        .\$(CONFIGURATION)\tests.exe /verify
      } else {
        .\x64\$(CONFIGURATION)\tests.exe /verify
      }
    displayName: Run
    workingDirectory: 'testcases\proj.win'

  - bash: diff ../testcases.std ../testcases.log
    displayName: diff
    workingDirectory: 'testcases\proj.win'


- job: Ubuntu
  condition: in(variables['Build.Reason'], 'Manual', 'Schedule')
  timeoutInMinutes: 10

  strategy:
    matrix:
      16.04 Debug:
        VMIMAGE: ubuntu-16.04
        CONFIGURATION: Debug
      16.04 Release:
        VMIMAGE: ubuntu-16.04
        CONFIGURATION: Release

  pool:
    vmImage: $(VMIMAGE)

  steps:
  - bash: sudo apt-get install --no-install-recommends -y codelite
    displayName: Install CodeLite

  - bash: |
      set -ex
      curl https://github.com/jiapw/CPCF/releases/download/CPCF-Libs/cpcf_linux_ipp.7z -Lo/tmp/cpcf_linux_ipp.7z
      7z x /tmp/cpcf_linux_ipp.7z -olibs/linux/
      rm /tmp/cpcf_linux_ipp.7z
    displayName: Retrieve libs
  - bash: |
      set -ex
      codelite-make -w shared_test.workspace -c ${CONFIGURATION} -s <(printf '<BuildSettings/>')
      make -j4
    displayName: make
    workingDirectory: testcases/proj.linux
  - bash: |
      set -ex
      mv ../testcases.log ../testcases.std
      ${CONFIGURATION}/shared_test --verify
    displayName: Run
    workingDirectory: testcases/proj.linux
  - bash: diff ../testcases.std ../testcases.log
    displayName: diff
    workingDirectory: 'testcases/proj.linux'


- job: Ubuntu_18
  displayName: Ubuntu 18.04
  condition: in(variables['Build.Reason'], 'Manual', 'Schedule')
  timeoutInMinutes: 10

  strategy:
    matrix:
      Debug:
        CONFIGURATION: Debug
      Release:
        CONFIGURATION: Release

  pool:
    vmImage: ubuntu-latest
  container: yuantailing/codelite:18.04

  steps:
  - bash: |
      set -ex
      curl https://github.com/jiapw/CPCF/releases/download/CPCF-Libs/cpcf_linux_ipp.7z -Lo/tmp/cpcf_linux_ipp.7z
      7z x /tmp/cpcf_linux_ipp.7z -olibs/linux/
      rm /tmp/cpcf_linux_ipp.7z
    displayName: Retrieve libs

  - bash: |
      set -ex
      codelite-make -w shared_test.workspace -c ${CONFIGURATION} -s <(printf '<BuildSettings/>')
      make -j4
    displayName: make
    workingDirectory: testcases/proj.linux

  - bash: |
      set -ex
      mv ../testcases.log ../testcases.std
      ${CONFIGURATION}/shared_test --verify
    displayName: Run
    workingDirectory: testcases/proj.linux

  - bash: diff ../testcases.std ../testcases.log
    displayName: diff
    workingDirectory: 'testcases/proj.linux'


- job: MacOS
  timeoutInMinutes: 10

  strategy:
    matrix:
      10.14 Debug:
        vmImage: 'macos-10.14'
        Configuration: Debug
      10.14 Release:
        vmImage: 'macos-10.14'
        Configuration: Release
  pool:
    vmImage: $(vmImage)

  steps:
  - bash: |
      set -ex
      curl https://github.com/jiapw/CPCF/releases/download/CPCF-Libs/cpcf_mac_ipp.7z -Locpcf_mac_ipp.7z
      brew install p7zip
      7z x cpcf_mac_ipp.7z -olibs/mac/
      rm cpcf_mac_ipp.7z
    displayName: Retrieve libs

  - bash: |
      sed -i '' '/_LOG_WARNING("LoadEnvironmentVariablesAsOptions on Mac/iOS is not implemented");/d' core/os/file_dir.cpp
    displayName: Remove a warning

  - task: Xcode@5
    inputs:
      actions: 'build'
      sdk: 'macosx10.14'
      xcWorkspacePath: 'testcases/proj.mac/*.xcodeproj/project.xcworkspace'
      packageApp: false

  - bash: |
      set -ex
      mv ../testcases.log ../testcases.std
      ${HOME}/Library/Developer/Xcode/DerivedData/tester-*/Build/Products/${CONFIGURATION}/tester --verify
    displayName: Run
    workingDirectory: 'testcases/proj.mac'

  #- bash: |
  #    python3 -c 'with open("../testcases.log", "rb") as f, open("../testcases.log.2", "wb") as f2: f2.write(f.read().replace(b"LoadEnvironmentVariablesAsOptions on Mac/iOS is not implemented\r\n", b""))'
  #  displayName: Remove a warning
  #  workingDirectory: 'testcases/proj.mac'

  - bash: diff ../testcases.std ../testcases.log.2
    displayName: diff
    workingDirectory: 'testcases/proj.mac'
